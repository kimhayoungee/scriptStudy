/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2021-06-18 01:57:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class study_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"EUC-KR\">\r\n");
      out.write("	<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	var users = [\r\n");
      out.write("		 {id: 1, name: 'ID', age: 36}\r\n");
      out.write("		,{id: 2, name: 'BJ', age: 32}\r\n");
      out.write("		,{id: 3, name: 'JM', age: 32}\r\n");
      out.write("		,{id: 4, name: 'PJ', age: 27}\r\n");
      out.write("		,{id: 5, name: 'HA', age: 25}\r\n");
      out.write("		,{id: 6, name: 'JE', age: 26}\r\n");
      out.write("		,{id: 7, name: 'JI', age: 31}\r\n");
      out.write("		,{id: 8, name: 'MP', age: 23}\r\n");
      out.write("	];\r\n");
      out.write("	\r\n");
      out.write("/*	1. 명령형 코드 */\r\n");
      out.write("	//	1) 30세 이상인 users를 거른다. \r\n");
      out.write("	var temp_users  = [];\r\n");
      out.write("	for(var i=0;i<users.length;i++){\r\n");
      out.write("		if(users[i].age >= 30){\r\n");
      out.write("			temp_users.push(users[i]);\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("//	console.log(temp_users);\r\n");
      out.write("	\r\n");
      out.write("	//	2) 30세 이상인 users의 names를 수집한다.\r\n");
      out.write("	var names = [];\r\n");
      out.write("	for(var i=0;i<temp_users.length;i++){\r\n");
      out.write("		names.push(temp_users[i].name);\r\n");
      out.write("	}\r\n");
      out.write("//	console.log(names);\r\n");
      out.write("	\r\n");
      out.write("	//	3)30세 미만인 users를 거른다.\r\n");
      out.write("	var temp_users  = [];\r\n");
      out.write("	for(var i=0;i<users.length;i++){\r\n");
      out.write("		if(users[i].age < 30){\r\n");
      out.write("			temp_users.push(users[i]);\r\n");
      out.write("		}\r\n");
      out.write("	}	\r\n");
      out.write("//	console.log(temp_users);\r\n");
      out.write("	\r\n");
      out.write("	//	4)30세 미만인 users의 ages를 수집한다.\r\n");
      out.write("	var ages = [];\r\n");
      out.write("	for(var i=0;i<temp_users.length;i++){\r\n");
      out.write("		ages.push(temp_users[i].age);\r\n");
      out.write("	}\r\n");
      out.write("//	console.log(ages);\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("/* 	2. _filter, _map으로 리팩토링 */\r\n");
      out.write("	function _filter(list, predi){\r\n");
      out.write("		var new_list = [];\r\n");
      out.write("		for(var i=0;i<list.length;i++){\r\n");
      out.write("			if(predi(list[i])){\r\n");
      out.write("				new_list.push(list[i]);\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		return new_list;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("/*	    원래 있는 값을 직접 변경하지 않고 변형된 새로운 값을 리턴하는 방식으로 값을 변형해나가기 \r\n");
      out.write("	    필터와 같은 함수인 응용형 함수(응용형 프로그래밍, 적용형 프로그래밍)는 함수가 함수를 받아서 \r\n");
      out.write("	    원하는 시점에 해당하는 함수가 알고있는 인자를 적용하는 식으로 프로그래밍 하는 것 \r\n");
      out.write("	    필터함수를 고차함수라고도 함\r\n");
      out.write("	    고차함수는 함수를 인자로 받거나 함수를 리턴하거나 함수 안에서 인자로 받은 함수를 실행하는 함수	*/\r\n");
      out.write("	\r\n");
      out.write("//	console.log( _filter(users, function(user) { return user.age >= 30; }));\r\n");
      out.write("	\r\n");
      out.write("//	console.log( _filter(users, function(user) { return user.age < 30; }));	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("//	console.log( _filter([1, 2, 3, 4], function(num) { return num % 2; }));\r\n");
      out.write("	\r\n");
      out.write("//	console.log( _filter([1, 2, 3, 4], function(num) { return !(num % 2); }));\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	function _map(list, mapper){\r\n");
      out.write("		var new_list = [];\r\n");
      out.write("		for(var i=0;i<list.length;i++){\r\n");
      out.write("			new_list.push(mapper(list[i]));\r\n");
      out.write("		}\r\n");
      out.write("		return new_list;		\r\n");
      out.write("	}\r\n");
      out.write("	//다형성이 굉장히 높고 데이터가 어떻게 생겼는 지에 대해 알 수 없음\r\n");
      out.write("	//관심사가 완전히 분리되는 것\r\n");
      out.write("	\r\n");
      out.write("	var over_30 = _filter(users, function(user) { return user.age >= 30; });\r\n");
      out.write("//	console.log(over_30);\r\n");
      out.write("	\r\n");
      out.write("	var names = _map(over_30, function(user){\r\n");
      out.write("		return user.name;\r\n");
      out.write("	});\r\n");
      out.write("	console.log(names);\r\n");
      out.write("	\r\n");
      out.write("	var under_30 = _filter(users, function(user) { return user.age < 30; });\r\n");
      out.write("//	console.log(under_30);\r\n");
      out.write("	\r\n");
      out.write("	var ages = _map(under_30, function(user){\r\n");
      out.write("		return user.age;\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	console.log(ages);\r\n");
      out.write("	\r\n");
      out.write("	console.log(_map([1, 2, 3], function(num) { return num * 2; }));\r\n");
      out.write("	\r\n");
      out.write("/*	함수형 프로그래밍에서는 대입문을 많이 사용하지 않는 경향이 있다.\r\n");
      out.write("	원래 값을 만들어놓고 문장을 내려가면서 변형해나가는 것이 아니라\r\n");
      out.write("	함수를 통과해나가면서 한번에 값을 새롭게 만들어 나가는 식으로 프로그래밍  */\r\n");
      out.write("	\r\n");
      out.write("	console.log(\r\n");
      out.write("		_map(\r\n");
      out.write("			_filter(users, function(user) { return user.age >= 30; }),\r\n");
      out.write("			function(user){ return user.name; }));\r\n");
      out.write("	\r\n");
      out.write("	console.log(\r\n");
      out.write("		_map(\r\n");
      out.write("			_filter(users, function(user){ return user.age < 30; }),\r\n");
      out.write("			function(user) {return user.age; }));\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
