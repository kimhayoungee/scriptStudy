/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2021-06-28 01:50:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class object_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"EUC-KR\">\r\n");
      out.write("		<link rel=\"shortcut icon\" href=\"#\">\r\n");
      out.write("		<title>Insert title here</title>\r\n");
      out.write("	</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("/* 	Objects\r\n");
      out.write("	one of the JavaScript's data types\r\n");
      out.write("	a collection of related data and/or functionality\r\n");
      out.write("	Nearly all objects in JavaScript are instances of Object\r\n");
      out.write("	object = { key : value }; */\r\n");
      out.write("	\r\n");
      out.write("		//1. Literals and properties\r\n");
      out.write("		const name='ellie';\r\n");
      out.write("		const age = 4;\r\n");
      out.write("		/*		print(name, age);\r\n");
      out.write(" 		funtcion print(name, age){\r\n");
      out.write("			console.log(name);\r\n");
      out.write("			console.log(age);\r\n");
      out.write("		} */\r\n");
      out.write("		function print(person){\r\n");
      out.write("			console.log(person.name);\r\n");
      out.write("			console.log(person.age);\r\n");
      out.write("		}\r\n");
      out.write("		const ellie = { name: 'ellie', age: 4};\r\n");
      out.write("		print(ellie);\r\n");
      out.write("		\r\n");
      out.write("		const obj1 = {}; 		   //'object literal' syntax\r\n");
      out.write("		const obj2 = new Object(); //'object constructor' syntax\r\n");
      out.write("		\r\n");
      out.write("		//dynamically typed language 동적으로 runtime 때 타입이 결정되는 언어\r\n");
      out.write("		ellie.hasJob = true; \r\n");
      out.write("		console.log(ellie.hasJob);\r\n");
      out.write("		\r\n");
      out.write("		delete ellie.hasJob;\r\n");
      out.write("		console.log(ellie.hasJob);\r\n");
      out.write("		\r\n");
      out.write("		//2. Computed properties\r\n");
      out.write("		//key should be always string ''\r\n");
      out.write("		console.log(ellie.name);	//코딩하는 순간 그 key에 해당하는 값을 받아오고 싶을 때  \r\n");
      out.write("		console.log(ellie['name']); //정확하게 어떤 key가 필요한 지 모를 때 \r\n");
      out.write("		ellie['hasJob'] = true;\r\n");
      out.write("		console.log(ellie.hasJob);\r\n");
      out.write("		\r\n");
      out.write("		function printValue(obj, key){\r\n");
      out.write("			//console.log(obj.key); key를 모르기 때문에 undefined\r\n");
      out.write("			console.log(obj[key]);\r\n");
      out.write("			//동적으로 key의 value를 받아와야 할 때 computed properties 사용 \r\n");
      out.write("		}\r\n");
      out.write("		printValue(ellie, 'name');\r\n");
      out.write("		printValue(ellie, 'age');\r\n");
      out.write("		\r\n");
      out.write("		//3. Property value shorthand\r\n");
      out.write("		const person1 = { name: 'bob', age: 2 };\r\n");
      out.write("		const person2 = { name: 'steve', age: 3 };\r\n");
      out.write("		const person3 = { name: 'dave', age: 4 };\r\n");
      out.write("		//const person4 = makePerson('ellie', 30);\r\n");
      out.write("		const person4 = new Person('ellie', 30);\r\n");
      out.write("		console.log(person4);\r\n");
      out.write("		\r\n");
      out.write("		//4. Constructor function \r\n");
      out.write("		//다른 계산을 하지 않고 순수하게 object를 생성하는 함수들은 보통 대문자로 시작 \r\n");
      out.write("		function Person(name, age){\r\n");
      out.write("			/*return {\r\n");
      out.write("				// name: name ,age: age \r\n");
      out.write("				//자바스크립트는 property value shorthand라는 기능이 있어서 key와 value의 이름이 동일하다면 생략 가능\r\n");
      out.write("				name, age\r\n");
      out.write("			};*/\r\n");
      out.write("			//this = {};\r\n");
      out.write("			this.name = name;\r\n");
      out.write("			this.age = age;\r\n");
      out.write("			//return this;\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		//5. in operator: property existence check (key in obj)\r\n");
      out.write("		//해당하는 오브젝트 안에 키가 있는 지 없는 지 확인\r\n");
      out.write("		console.log('name' in ellie);\r\n");
      out.write("		console.log('age' in ellie);\r\n");
      out.write("		console.log('random' in ellie); //false \r\n");
      out.write("		console.log(ellie.random);		//undefined\r\n");
      out.write("		\r\n");
      out.write("		//6. for..in vs for..of\r\n");
      out.write("		//for(key in obj) 모든 key들을 받아와서 일을 처리하고 싶을 때 \r\n");
      out.write("		for(key in ellie){\r\n");
      out.write("			console.log(key);\r\n");
      out.write("		}	\r\n");
      out.write("		\r\n");
      out.write("		//for(value of iterable) 배열과 같은 순차적으로 iterable한 애한테 씀 \r\n");
      out.write("		const array = [1, 2, 4, 5];\r\n");
      out.write("		for(let i=0; i<array.length; i++){\r\n");
      out.write("			console.log(array[i]);\r\n");
      out.write("		}\r\n");
      out.write("		//위와 똑같이 나옴 \r\n");
      out.write("		for(value of array){\r\n");
      out.write("			console.log(value);\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		console.clear();\r\n");
      out.write("		//7. Fun cloning\r\n");
      out.write("		//Object.assign(dest, [obj1, obj2, obj3...])\r\n");
      out.write("		const user = { name: 'ellie', age: '20'};\r\n");
      out.write("		const user2 = user;\r\n");
      out.write("		user2.name = 'coder';\r\n");
      out.write("		console.log(user);\r\n");
      out.write("		//user2에 user를 담으면서 둘이 같은 ref를 갖게되어 갖은 오브젝트를 가리킴\r\n");
      out.write("		//user2에서 name을 변경하면 user의 이름도 변경됨 => 같은 오브젝트를 가리키고 있으니까 당연히!\r\n");
      out.write("		\r\n");
      out.write("		//old way\r\n");
      out.write("		const user3 = {};\r\n");
      out.write("		//키를 돌리면서 복사 name, age\r\n");
      out.write("		for(key in user){\r\n");
      out.write("			user3[key] = user[key];\r\n");
      out.write("		}\r\n");
      out.write("		console.log(user3); \r\n");
      out.write("		\r\n");
      out.write("		//const user4 = {};\r\n");
      out.write("		//Object.assign(user4, user);\r\n");
      out.write("		const user4 = Object.assign({}, user);\r\n");
      out.write("		console.log(user4);\r\n");
      out.write("		\r\n");
      out.write("		//another example\r\n");
      out.write("		const fruit1 = { color: 'red' };\r\n");
      out.write("		const fruit2 = { color: 'blue', size: 'big' };\r\n");
      out.write("		const mixed = Object.assign({}, fruit1, fruit2);\r\n");
      out.write("		console.log(mixed.color);\r\n");
      out.write("		console.log(mixed.size);\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
